#!/usr/bin/python
"""
primarybeammap.py --freq=202.24 --beamformer=0,0,0,1,3,3,3,3,6,6,6,6,8,9,9,9 --datetimestring=20110926210616

main task is:
make_primarybeammap()

This is the script interface to the functions and modules defined in MWA_Tools/src/primarybeamap.py

"""
from __future__ import print_function

# import pdb
# TEMPORARY ??? fails in pawsey 
try :
   from astropy.utils.iers import conf
   conf.auto_max_age = None
except :
   print("Not working : from astropy.utils.iers import conf")  
   


import sys
import numpy
import math
import os
import time
from optparse import OptionParser
import ephem
import logging
# import matplotlib
#if not 'matplotlib.backends' in sys.modules:
#    matplotlib.use('agg')
#import matplotlib.pyplot as pylab
from primarybeammap_local import *
import errno
from scipy.interpolate import interp1d
from eda_beam import read_antenna_list

# configuration:
import station_beam_config

# receiver temperature models :
import station_trcv

def mkdir_p(path):
   try:
      os.makedirs(path)
   except OSError as exc: # Python >2.5
      if exc.errno == errno.EEXIST:
         pass
      else: raise  

# see EDGES / BIGHORNS calibrtion where T = T_ant(1-|G|^2)xF and calculation of this for MWA LNA and ANT reflection coefficients in eda_mwa_s11_vs_tsys.odt
def corr_factor( freq_mhz ):
   x=[50.00000000,51.00000000,52.00000000,53.00000000,54.00000000,55.00000000,56.00000000,57.00000000,58.00000000,59.00000000,60.00000000,61.00000000,62.00000000,63.00000000,64.00000000,65.00000000,66.00000000,67.00000000,68.00000000,69.00000000,70.00000000,71.00000000,72.00000000,73.00000000,74.00000000,75.00000000,76.00000000,77.00000000,78.00000000,79.00000000,80.00000000,81.00000000,82.00000000,83.00000000,84.00000000,85.00000000,86.00000000,87.00000000,88.00000000,89.00000000,90.00000000,91.00000000,92.00000000,93.00000000,94.00000000,95.00000000,96.00000000,97.00000000,98.00000000,99.00000000,100.00000000,101.00000000,102.00000000,103.00000000,104.00000000,105.00000000,106.00000000,107.00000000,108.00000000,109.00000000,110.00000000,111.00000000,112.00000000,113.00000000,114.00000000,115.00000000,116.00000000,117.00000000,118.00000000,119.00000000,120.00000000,121.00000000,122.00000000,123.00000000,124.00000000,125.00000000,126.00000000,127.00000000,128.00000000,129.00000000,130.00000000,131.00000000,132.00000000,133.00000000,134.00000000,135.00000000,136.00000000,137.00000000,138.00000000,139.00000000,140.00000000,141.00000000,142.00000000,143.00000000,144.00000000,145.00000000,146.00000000,147.00000000,148.00000000,149.00000000,150.00000000,151.00000000,152.00000000,153.00000000,154.00000000,155.00000000,156.00000000,157.00000000,158.00000000,159.00000000,160.00000000,161.00000000,162.00000000,163.00000000,164.00000000,165.00000000,166.00000000,167.00000000,168.00000000,169.00000000,170.00000000,171.00000000,172.00000000,173.00000000,174.00000000,175.00000000,176.00000000,177.00000000,178.00000000,179.00000000,180.00000000,181.00000000,182.00000000,183.00000000,184.00000000,185.00000000,186.00000000,187.00000000,188.00000000,189.00000000,190.00000000,191.00000000,192.00000000,193.00000000,194.00000000,195.00000000,196.00000000,197.00000000,198.00000000,199.00000000,200.00000000,201.00000000,202.00000000,203.00000000,204.00000000,205.00000000,206.00000000,207.00000000,208.00000000,209.00000000,210.00000000,211.00000000,212.00000000,213.00000000,214.00000000,215.00000000,216.00000000,217.00000000,218.00000000,219.00000000,220.00000000,221.00000000,222.00000000,223.00000000,224.00000000,225.00000000,226.00000000,227.00000000,228.00000000,229.00000000,230.00000000,231.00000000,232.00000000,233.00000000,234.00000000,235.00000000,236.00000000,237.00000000,238.00000000,239.00000000,240.00000000,241.00000000,242.00000000,243.00000000,244.00000000,245.00000000,246.00000000,247.00000000,248.00000000,249.00000000]
   y=[0.08912242,0.07721792,0.04609371,-0.01133767,-0.01276214,0.01549312,0.06871185,0.08860269,0.07643168,0.04912048,0.00412459,-0.00301710,0.02834296,0.07347027,0.10001422,0.08787812,0.06405323,0.02698827,0.02295727,0.05957008,0.11012247,0.14693531,0.15497359,0.15220799,0.14370521,0.10009372,0.11482784,0.16649026,0.22446154,0.24373882,0.23060770,0.20520891,0.21757425,0.21225637,0.25861755,0.33168508,0.34943556,0.37546269,0.37453798,0.39159744,0.41762699,0.46533036,0.50539939,0.55188025,0.57865380,0.57503354,0.62208188,0.64557389,0.68943086,0.73893969,0.77371939,0.78861476,0.81036684,0.83427040,0.85935258,0.88857591,0.91136789,0.92919084,0.93894880,0.95208014,0.96111329,0.97379422,0.98340299,0.99016717,0.97197000,0.97734748,0.98113121,0.98378753,0.98501222,0.98534961,0.98388481,0.98300789,0.98405898,0.98478998,0.98355750,0.98243722,0.97724293,0.97338524,0.96783511,0.96732059,0.96555664,0.96404617,0.96188810,0.95912091,0.95388157,0.94800783,0.94847676,0.94851709,0.95044555,0.94861605,0.94868156,0.94797992,0.94786234,0.94818550,0.94816922,0.94431687,0.94027499,0.93560637,0.93344524,0.93469789,0.93843478,0.94261944,0.94278552,0.93895696,0.93163682,0.92421935,0.92272357,0.92546054,0.92519836,0.92389587,0.92097637,0.91616509,0.91259728,0.91094121,0.90967664,0.90839891,0.90539135,0.90341131,0.89925866,0.89837845,0.89686758,0.89522150,0.89176561,0.88671853,0.87881250,0.87419857,0.87202101,0.87313226,0.87183421,0.87232963,0.86687810,0.86102757,0.85654418,0.85210142,0.85120923,0.85168344,0.85120898,0.84616121,0.84087749,0.83518494,0.82928205,0.82778675,0.82846430,0.82762172,0.82483913,0.82025476,0.81666290,0.81274387,0.81062373,0.80811906,0.80713943,0.80486419,0.80223115,0.79857627,0.79462539,0.79169083,0.78876251,0.78699047,0.78391292,0.78109751,0.77943078,0.77573271,0.77084132,0.77084096,0.76688971,0.76447859,0.76299012,0.76018396,0.75658389,0.75435009,0.75068554,0.74877532,0.74449484,0.74414337,0.74101523,0.73861599,0.73650966,0.73299767,0.73167575,0.72713858,0.72586185,0.72514598,0.72207558,0.71880213,0.71659679,0.71392717,0.71309830,0.71078774,0.70824188,0.70638363,0.70575477,0.70194657,0.70054503,0.69789351,0.69873967,0.69388901,0.69458750,0.69008693,0.68859824,0.68531843]
   
   corr = interp1d(x, y, kind='cubic')
   return corr(freq_mhz)

# see Adrian's not (suppossedy OK - without factor F which cancels out (1-G^2)F^2 cancels out and eda_mwa_s11_vs_tsys.odt page 8:
# so here I just used values of Sdd11 from Budi in file ~/Desktop/EDA/data/Budi/SDD11_SDD22W_Ferrite_MHz.txt or SDD11_SDD22W_Ferrite.txt
def corr_factor_adrian( freq_mhz ):
   x=[50.00,51.00,52.00,53.00,54.00,55.00,56.00,57.00,58.00,59.00,60.00,61.00,62.00,63.00,64.00,65.00,66.00,67.00,68.00,69.00,70.00,71.00,72.00,73.00,74.00,75.00,76.00,77.00,78.00,79.00,80.00,81.00,82.00,83.00,84.00,85.00,86.00,87.00,88.00,89.00,90.00,91.00,92.00,93.00,94.00,95.00,96.00,97.00,98.00,99.00,100.00,101.00,102.00,103.00,104.00,105.00,106.00,107.00,108.00,109.00,110.00,111.00,112.00,113.00,114.00,115.00,116.00,117.00,118.00,119.00,120.00,121.00,122.00,123.00,124.00,125.00,126.00,127.00,128.00,129.00,130.00,131.00,132.00,133.00,134.00,135.00,136.00,137.00,138.00,139.00,140.00,141.00,142.00,143.00,144.00,145.00,146.00,147.00,148.00,149.00,150.00,151.00,152.00,153.00,154.00,155.00,156.00,157.00,158.00,159.00,160.00,161.00,162.00,163.00,164.00,165.00,166.00,167.00,168.00,169.00,170.00,171.00,172.00,173.00,174.00,175.00,176.00,177.00,178.00,179.00,180.00,181.00,182.00,183.00,184.00,185.00,186.00,187.00,188.00,189.00,190.00,191.00,192.00,193.00,194.00,195.00,196.00,197.00,198.00,199.00,200.00,201.00,202.00,203.00,204.00,205.00,206.00,207.00,208.00,209.00,210.00,211.00,212.00,213.00,214.00,215.00,216.00,217.00,218.00,219.00,220.00,221.00,222.00,223.00,224.00,225.00,226.00,227.00,228.00,229.00,230.00,231.00,232.00,233.00,234.00,235.00,236.00,237.00,238.00,239.00,240.00,241.00,242.00,243.00,244.00,245.00,246.00,247.00,248.00,249.00,250.00,251.00,252.00,253.00,254.00,255.00,256.00,257.00,258.00,259.00,260.00,261.00,262.00,263.00,264.00,265.00,266.00,267.00,268.00,269.00,270.00,271.00,272.00,273.00,274.00,275.00,276.00,277.00,278.00,279.00,280.00,281.00,282.00,283.00,284.00,285.00,286.00,287.00,288.00,289.00,290.00,291.00,292.00,293.00,294.00,295.00,296.00,297.00,298.00,299.00,300.00,301.00,302.00,303.00,304.00,305.00,306.00,307.00,308.00,309.00,310.00,311.00,312.00,313.00,314.00,315.00,316.00,317.00,318.00,319.00,320.00,321.00,322.00,323.00,324.00,325.00,326.00,327.00,328.00,329.00,330.00,331.00,332.00,333.00,334.00,335.00,336.00,337.00,338.00,339.00,340.00,341.00,342.00,343.00,344.00,345.00,346.00,347.00,348.00,349.00,350.00,351.00,352.00,353.00,354.00,355.00,356.00,357.00,358.00,359.00,360.00,361.00,362.00,363.00,364.00,365.00,366.00,367.00,368.00,369.00,370.00,371.00,372.00,373.00,374.00,375.00,376.00,377.00,378.00,379.00,380.00,381.00,382.00,383.00,384.00,385.00,386.00,387.00,388.00,389.00,390.00,391.00,392.00,393.00,394.00,395.00,396.00,397.00,398.00,399.00,400.00,401.00,402.00,403.00,404.00,405.00,406.00,407.00,408.00,409.00,410.00,411.00,412.00,413.00,414.00,415.00,416.00,417.00,418.00,419.00,420.00,421.00,422.00,423.00,424.00,425.00,426.00,427.00,428.00,429.00,430.00,431.00,432.00,433.00,434.00,435.00,436.00,437.00,438.00,439.00,440.00,441.00,442.00,443.00,444.00,445.00,446.00,447.00,448.00,449.00,450.00]
#   y=[-0.15400000,-0.13000000,-0.07490000,0.01760000,0.01960000,-0.02390000,-0.10800000,-0.14000000,-0.11900000,-0.07490000,-0.00609000,0.00440000,-0.04160000,-0.10900000,-0.14900000,-0.12800000,-0.09100000,-0.03700000,-0.03080000,-0.08020000,-0.14900000,-0.19900000,-0.20600000,-0.19800000,-0.18200000,-0.12100000,-0.13700000,-0.20000000,-0.27200000,-0.29300000,-0.26800000,-0.22900000,-0.23900000,-0.22700000,-0.27800000,-0.36700000,-0.38300000,-0.40900000,-0.39900000,-0.41400000,-0.44100000,-0.49900000,-0.55000000,-0.61300000,-0.64800000,-0.62700000,-0.70100000,-0.73100000,-0.80800000,-0.91100000,-0.98300000,-1.01000000,-1.06000000,-1.12000000,-1.19000000,-1.29000000,-1.39000000,-1.48000000,-1.52000000,-1.60000000,-1.66000000,-1.77000000,-1.89000000,-2.00000000,-2.12000000,-2.20000000,-2.28000000,-2.37000000,-2.49000000,-2.58000000,-2.73000000,-2.80000000,-2.80000000,-2.81000000,-2.85000000,-2.93000000,-3.05000000,-3.15000000,-3.26000000,-3.28000000,-3.31000000,-3.32000000,-3.36000000,-3.40000000,-3.50000000,-3.58000000,-3.57000000,-3.54000000,-3.51000000,-3.51000000,-3.49000000,-3.48000000,-3.46000000,-3.42000000,-3.41000000,-3.46000000,-3.51000000,-3.57000000,-3.56000000,-3.50000000,-3.40000000,-3.30000000,-3.25000000,-3.28000000,-3.39000000,-3.49000000,-3.49000000,-3.42000000,-3.36000000,-3.33000000,-3.35000000,-3.41000000,-3.43000000,-3.44000000,-3.42000000,-3.39000000,-3.38000000,-3.39000000,-3.42000000,-3.39000000,-3.34000000,-3.32000000,-3.35000000,-3.46000000,-3.57000000,-3.65000000,-3.63000000,-3.53000000,-3.45000000,-3.39000000,-3.46000000,-3.55000000,-3.64000000,-3.66000000,-3.56000000,-3.45000000,-3.38000000,-3.43000000,-3.55000000,-3.70000000,-3.78000000,-3.75000000,-3.61000000,-3.48000000,-3.45000000,-3.52000000,-3.63000000,-3.68000000,-3.65000000,-3.56000000,-3.47000000,-3.46000000,-3.51000000,-3.60000000,-3.68000000,-3.68000000,-3.62000000,-3.59000000,-3.59000000,-3.64000000,-3.71000000,-3.72000000,-3.66000000,-3.62000000,-3.55000000,-3.58000000,-3.68000000,-3.80000000,-3.83000000,-3.76000000,-3.66000000,-3.57000000,-3.57000000,-3.70000000,-3.88000000,-4.02000000,-4.02000000,-3.95000000,-3.86000000,-3.82000000,-3.89000000,-4.01000000,-4.14000000,-4.16000000,-4.13000000,-4.02000000,-3.98000000,-3.99000000,-4.09000000,-4.20000000,-4.24000000,-4.24000000,-4.20000000,-4.21000000,-4.27000000,-4.35000000,-4.40000000,-4.43000000,-4.39000000,-4.30000000,-4.21000000,-4.25000000,-4.34000000,-4.48000000,-4.59000000,-4.61000000,-4.60000000,-4.58000000,-4.60000000,-4.65000000,-4.73000000,-4.81000000,-4.83000000,-4.82000000,-4.79000000,-4.79000000,-4.85000000,-4.89000000,-4.96000000,-4.98000000,-4.97000000,-4.99000000,-5.00000000,-5.05000000,-5.12000000,-5.20000000,-5.23000000,-5.23000000,-5.25000000,-5.24000000,-5.22000000,-5.28000000,-5.31000000,-5.31000000,-5.27000000,-5.24000000,-5.25000000,-5.27000000,-5.36000000,-5.50000000,-5.58000000,-5.65000000,-5.64000000,-5.60000000,-5.52000000,-5.52000000,-5.57000000,-5.69000000,-5.84000000,-6.01000000,-6.07000000,-6.08000000,-6.03000000,-5.92000000,-5.92000000,-5.94000000,-6.01000000,-6.13000000,-6.21000000,-6.21000000,-6.13000000,-6.09000000,-6.10000000,-6.23000000,-6.41000000,-6.52000000,-6.60000000,-6.53000000,-6.49000000,-6.46000000,-6.60000000,-6.74000000,-6.89000000,-6.95000000,-6.85000000,-6.65000000,-6.52000000,-6.58000000,-6.70000000,-6.99000000,-7.23000000,-7.28000000,-7.34000000,-7.29000000,-7.27000000,-7.30000000,-7.38000000,-7.50000000,-7.48000000,-7.51000000,-7.45000000,-7.35000000,-7.37000000,-7.47000000,-7.59000000,-7.77000000,-7.95000000,-8.08000000,-8.24000000,-8.36000000,-8.33000000,-8.26000000,-8.19000000,-8.10000000,-8.07000000,-8.10000000,-8.12000000,-8.11000000,-8.04000000,-8.01000000,-7.99000000,-7.99000000,-7.98000000,-8.02000000,-8.04000000,-8.05000000,-7.98000000,-7.89000000,-7.83000000,-7.83000000,-7.80000000,-7.87000000,-7.91000000,-8.01000000,-7.99000000,-7.93000000,-7.79000000,-7.70000000,-7.66000000,-7.76000000,-7.91000000,-8.02000000,-8.06000000,-7.93000000,-7.72000000,-7.62000000,-7.59000000,-7.69000000,-7.84000000,-8.04000000,-7.98000000,-7.82000000,-7.67000000,-7.65000000,-7.83000000,-8.12000000,-8.51000000,-8.72000000,-8.80000000,-8.68000000,-8.46000000,-8.25000000,-8.10000000,-8.03000000,-7.91000000,-7.79000000,-7.57000000,-7.47000000,-7.48000000,-7.68000000,-7.93000000,-8.08000000,-8.07000000,-7.99000000,-7.85000000,-7.80000000,-7.79000000,-7.80000000,-7.79000000,-7.60000000,-7.42000000,-7.21000000,-7.16000000,-7.19000000,-7.27000000,-7.34000000,-7.30000000,-7.23000000,-7.14000000,-7.11000000,-7.15000000,-7.31000000,-7.44000000,-7.50000000,-7.48000000,-7.42000000,-7.35000000,-7.36000000,-7.36000000,-7.42000000,-7.53000000,-7.64000000,-7.56000000,-7.37000000,-7.09000000,-6.80000000,-6.60000000,-6.46000000,-6.38000000,-6.33000000,-6.31000000]

   # Correct S11 is 20, but I need |S11|^2 -> I have to square it so in the end it is just 10 !
   # proper S11 in linear scale - see Illustration 11 in eda_mwa_s11_vs_tsys.odt  (page 9) :
   # TMath::Power(10,val_in_db*0.1) 
   # ~/Desktop/EDA/data/Budi$ awk '{printf("%.8f,",1-$2);}' SDD11_SDD22W_Ferrite_MHz_LINERR_db2num10.txt 
   # MAy not be the best :
   # y=[0.03483848,0.02949003,0.01709850,-0.00406077,-0.00452327,0.00548806,0.02456126,0.03172214,0.02702877,0.01709850,0.00140129,-0.00101365,0.00953302,0.02478584,0.03372665,0.02904299,0.02073552,0.00848338,0.00706687,0.01829727,0.03372665,0.04478749,0.04632587,0.04456752,0.04104109,0.02747673,0.03105305,0.04500741,0.06070935,0.06524026,0.05984383,0.05136313,0.05354493,0.05092617,0.06200613,0.08103282,0.08441219,0.08987719,0.08777914,0.09092440,0.09655858,0.10854382,0.11895113,0.13163962,0.13860965,0.13443438,0.14905792,0.15491577,0.16976698,0.18922565,0.20255636,0.20749867,0.21657036,0.22731941,0.23967372,0.25698086,0.27389404,0.28878649,0.29530693,0.30816903,0.31766131,0.33472684,0.35285738,0.36904266,0.38623799,0.39744041,0.40843837,0.42057130,0.43636234,0.44792256,0.46666510,0.47519254,0.47519254,0.47639956,0.48119996,0.49066913,0.50454981,0.51582763,0.52793696,0.53010589,0.53334062,0.53441391,0.53868243,0.54291181,0.55331641,0.56146930,0.56045838,0.55741163,0.55434375,0.55434375,0.55228670,0.55125461,0.54918330,0.54501194,0.54396308,0.54918330,0.55434375,0.56045838,0.55944514,0.55331641,0.54291181,0.53226486,0.52684874,0.53010589,0.54185811,0.55228670,0.55228670,0.54501194,0.53868243,0.53548472,0.53761898,0.54396308,0.54605838,0.54710242,0.54501194,0.54185811,0.54080199,0.54185811,0.54501194,0.54185811,0.53655308,0.53441391,0.53761898,0.54918330,0.56045838,0.56848092,0.56648912,0.55639136,0.54814406,0.54185811,0.54918330,0.55842955,0.56748617,0.56947339,0.55944514,0.54814406,0.54080199,0.54605838,0.55842955,0.57342048,0.58120643,0.57830350,0.56448813,0.55125461,0.54814406,0.55536873,0.56648912,0.57145148,0.56848092,0.55944514,0.55022015,0.54918330,0.55434375,0.56348417,0.57145148,0.57145148,0.56548978,0.56247789,0.56247789,0.56748617,0.57440159,0.57538044,0.56947339,0.56548978,0.55842955,0.56146930,0.57145148,0.58313062,0.58600033,0.57927337,0.56947339,0.56045838,0.56045838,0.57342048,0.59073934,0.60372197,0.60372197,0.59728297,0.58885028,0.58504596,0.59168061,0.60280845,0.61452164,0.61629275,0.61363302,0.60372197,0.60005525,0.60097510,0.61005801,0.61981060,0.62329620,0.62329620,0.61981060,0.62068502,0.62588941,0.63271770,0.63692195,0.63942136,0.63608496,0.62846477,0.62068502,0.62416260,0.63187103,0.64354887,0.65246384,0.65406062,0.65326315,0.65166268,0.65326315,0.65723221,0.66348843,0.66963046,0.67114837,0.67039029,0.66810554,0.66810554,0.67265931,0.67566038,0.68084621,0.68231259,0.68158025,0.68304325,0.68377223,0.68739206,0.69239032,0.69800483,0.70008375,0.70008375,0.70146174,0.70077354,0.69939237,0.70351686,0.70555784,0.70555784,0.70283340,0.70077354,0.70146174,0.70283340,0.70892829,0.71816171,0.72330584,0.72772987,0.72710222,0.72457713,0.71945664,0.71945664,0.72266799,0.73022606,0.73938465,0.74938907,0.75282759,0.75339607,0.75054053,0.74414141,0.74414141,0.74531697,0.74938907,0.75621892,0.76066842,0.76066842,0.75621892,0.75396324,0.75452911,0.76176805,0.77144012,0.77715649,0.78122384,0.77766901,0.77561181,0.77405642,0.78122384,0.78816389,0.79535554,0.79816336,0.79346198,0.78372815,0.77715649,0.78021401,0.78620379,0.80001381,0.81076564,0.81293179,0.81549846,0.81336203,0.81250055,0.81379129,0.81718998,0.82217206,0.82135124,0.82258105,0.82011291,0.81592280,0.81676856,0.82093941,0.82581931,0.83289094,0.83967546,0.84440344,0.85003152,0.85411857,0.85310737,0.85072056,0.84829496,0.84511834,0.84404475,0.84511834,0.84582995,0.84547456,0.84296372,0.84187520,0.84114533,0.84114533,0.84077913,0.84223887,0.84296372,0.84332489,0.84077913,0.83744512,0.83518376,0.83518376,0.83404131,0.83669481,0.83819200,0.84187520,0.84114533,0.83893544,0.83365873,0.83017563,0.82860427,0.83250571,0.83819200,0.84223887,0.84368524,0.83893544,0.83095591,0.82701836,0.82581931,0.82978415,0.83556283,0.84296372,0.84077913,0.83480382,0.82899847,0.82820916,0.83518376,0.84582995,0.85907112,0.86572350,0.86817433,0.86448106,0.85743924,0.85037643,0.84511834,0.84260171,0.83819200,0.83365873,0.82501533,0.82093941,0.82135124,0.82939176,0.83893544,0.84440344,0.84404475,0.84114533,0.83594102,0.83404131,0.83365873,0.83404131,0.83365873,0.82621992,0.81886599,0.80989217,0.80769083,0.80901467,0.81250055,0.81549846,0.81379129,0.81076564,0.80680317,0.80546399,0.80724751,0.81421955,0.81969823,0.82217206,0.82135124,0.81886599,0.81592280,0.81634617,0.81634617,0.81886599,0.82339622,0.82781314,0.82461195,0.81676856,0.80456605,0.79107039,0.78122384,0.77405642,0.76985582,0.76719087,0.76611628]
   y=[0.03483848,0.02949003,0.01709850,-0.00406077,-0.00452327,0.00548806,0.02456126,0.03172214,0.02702877,0.01709850,0.00140129,-0.00101365,0.00953302,0.02478584,0.03372665,0.02904299,0.02073552,0.00848338,0.00706687,0.01829727,0.03372665,0.04478749,0.04632587,0.04456752,0.04104109,0.02747673,0.03105305,0.04500741,0.06070935,0.06524026,0.05984383,0.05136313,0.05354493,0.05092617,0.06200613,0.08103282,0.08441219,0.08987719,0.08777914,0.09092440,0.09655858,0.10854382,0.11895113,0.13163962,0.13860965,0.13443438,0.14905792,0.15491577,0.16976698,0.18922565,0.20255636,0.20749867,0.21657036,0.22731941,0.23967372,0.25698086,0.27389404,0.28878649,0.29530693,0.30816903,0.31766131,0.33472684,0.35285738,0.36904266,0.38623799,0.39744041,0.40843837,0.42057130,0.43636234,0.44792256,0.46666510,0.47519254,0.47519254,0.47639956,0.48119996,0.49066913,0.50454981,0.51582763,0.52793696,0.53010589,0.53334062,0.53441391,0.53868243,0.54291181,0.55331641,0.56146930,0.56045838,0.55741163,0.55434375,0.55434375,0.55228670,0.55125461,0.54918330,0.54501194,0.54396308,0.54918330,0.55434375,0.56045838,0.55944514,0.55331641,0.54291181,0.53226486,0.52684874,0.53010589,0.54185811,0.55228670,0.55228670,0.54501194,0.53868243,0.53548472,0.53761898,0.54396308,0.54605838,0.54710242,0.54501194,0.54185811,0.54080199,0.54185811,0.54501194,0.54185811,0.53655308,0.53441391,0.53761898,0.54918330,0.56045838,0.56848092,0.56648912,0.55639136,0.54814406,0.54185811,0.54918330,0.55842955,0.56748617,0.56947339,0.55944514,0.54814406,0.54080199,0.54605838,0.55842955,0.57342048,0.58120643,0.57830350,0.56448813,0.55125461,0.54814406,0.55536873,0.56648912,0.57145148,0.56848092,0.55944514,0.55022015,0.54918330,0.55434375,0.56348417,0.57145148,0.57145148,0.56548978,0.56247789,0.56247789,0.56748617,0.57440159,0.57538044,0.56947339,0.56548978,0.55842955,0.56146930,0.57145148,0.58313062,0.58600033,0.57927337,0.56947339,0.56045838,0.56045838,0.57342048,0.59073934,0.60372197,0.60372197,0.59728297,0.58885028,0.58504596,0.59168061,0.60280845,0.61452164,0.61629275,0.61363302,0.60372197,0.60005525,0.60097510,0.61005801,0.61981060,0.62329620,0.62329620,0.61981060,0.62068502,0.62588941,0.63271770,0.63692195,0.63942136,0.63608496,0.62846477,0.62068502,0.62416260,0.63187103,0.64354887,0.65246384,0.65406062,0.65326315,0.65166268,0.65326315,0.65723221,0.66348843,0.66963046,0.67114837,0.67039029,0.66810554,0.66810554,0.67265931,0.67566038,0.68084621,0.68231259,0.68158025,0.68304325,0.68377223,0.68739206,0.69239032,0.69800483,0.70008375,0.70008375,0.70146174,0.70077354,0.69939237,0.70351686,0.70555784,0.70555784,0.70283340,0.70077354,0.70146174,0.70283340,0.70892829,0.71816171,0.72330584,0.72772987,0.72710222,0.72457713,0.71945664,0.71945664,0.72266799,0.73022606,0.73938465,0.74938907,0.75282759,0.75339607,0.75054053,0.74414141,0.74414141,0.74531697,0.74938907,0.75621892,0.76066842,0.76066842,0.75621892,0.75396324,0.75452911,0.76176805,0.77144012,0.77715649,0.78122384,0.77766901,0.77561181,0.77405642,0.78122384,0.78816389,0.79535554,0.79816336,0.79346198,0.78372815,0.77715649,0.78021401,0.78620379,0.80001381,0.81076564,0.81293179,0.81549846,0.81336203,0.81250055,0.81379129,0.81718998,0.82217206,0.82135124,0.82258105,0.82011291,0.81592280,0.81676856,0.82093941,0.82581931,0.83289094,0.83967546,0.84440344,0.85003152,0.85411857,0.85310737,0.85072056,0.84829496,0.84511834,0.84404475,0.84511834,0.84582995,0.84547456,0.84296372,0.84187520,0.84114533,0.84114533,0.84077913,0.84223887,0.84296372,0.84332489,0.84077913,0.83744512,0.83518376,0.83518376,0.83404131,0.83669481,0.83819200,0.84187520,0.84114533,0.83893544,0.83365873,0.83017563,0.82860427,0.83250571,0.83819200,0.84223887,0.84368524,0.83893544,0.83095591,0.82701836,0.82581931,0.82978415,0.83556283,0.84296372,0.84077913,0.83480382,0.82899847,0.82820916,0.83518376,0.84582995,0.85907112,0.86572350,0.86817433,0.86448106,0.85743924,0.85037643,0.84511834,0.84260171,0.83819200,0.83365873,0.82501533,0.82093941,0.82135124,0.82939176,0.83893544,0.84440344,0.84404475,0.84114533,0.83594102,0.83404131,0.83365873,0.83404131,0.83365873,0.82621992,0.81886599,0.80989217,0.80769083,0.80901467,0.81250055,0.81549846,0.81379129,0.81076564,0.80680317,0.80546399,0.80724751,0.81421955,0.81969823,0.82217206,0.82135124,0.81886599,0.81592280,0.81634617,0.81634617,0.81886599,0.82339622,0.82781314,0.82461195,0.81676856,0.80456605,0.79107039,0.78122384,0.77405642,0.76985582,0.76719087,0.76611628]
   
   # TMath::Power(10,(val_in_db/20.00))
   # ~/Desktop/EDA/data/Budi$ awk '{printf("%.8f,",1-$2);}' SDD11_SDD22W_Ferrite_MHz_LINERR_db2num0.txt 
   # y=[0.01757366,0.01485536,0.00858611,-0.00202833,-0.00225908,0.00274781,0.01235698,0.01598889,0.01360696,0.00858611,0.00070089,-0.00050670,0.00477793,0.01247068,0.01700796,0.01462849,0.01042207,0.00425072,0.00353970,0.00919087,0.01700796,0.02265026,0.02343760,0.02253774,0.02073552,0.01383406,0.01564897,0.02276278,0.03082992,0.03317026,0.03038349,0.02602009,0.02714078,0.02579579,0.03149916,0.04137224,0.04313647,0.04599643,0.04489746,0.04654544,0.04950464,0.05583043,0.06135796,0.06814144,0.07188883,0.06964221,0.07753478,0.08071537,0.08882877,0.09956991,0.10700300,0.10977456,0.11488439,0.12097748,0.12803310,0.13801442,0.14788149,0.15666524,0.16054001,0.16823623,0.17396205,0.18435721,0.19554825,0.20567177,0.21657036,0.22375288,0.23086956,0.23879786,0.24924195,0.25698086,0.26970219,0.27556404,0.27556404,0.27639760,0.27972225,0.28632579,0.29611777,0.30417505,0.31293156,0.31451177,0.31687528,0.31766131,0.32079637,0.32391702,0.33165608,0.33778350,0.33702065,0.33472684,0.33242510,0.33242510,0.33088618,0.33011539,0.32857115,0.32547197,0.32469495,0.32857115,0.33242510,0.33702065,0.33625693,0.33165608,0.32391702,0.31608835,0.31214009,0.31451177,0.32313821,0.33088618,0.33088618,0.32547197,0.32079637,0.31844643,0.32001395,0.32469495,0.32624810,0.32702334,0.32547197,0.32313821,0.32235849,0.32313821,0.32547197,0.32313821,0.31923064,0.31766131,0.32001395,0.32857115,0.33702065,0.34309888,0.34158457,0.33396048,0.32779769,0.32313821,0.32857115,0.33549233,0.34234216,0.34385473,0.33625693,0.32779769,0.32235849,0.32624810,0.33549233,0.34686945,0.35285738,0.35061837,0.34006677,0.33011539,0.32779769,0.33319323,0.34158457,0.34536383,0.34309888,0.33625693,0.32934371,0.32857115,0.33242510,0.33930655,0.34536383,0.34536383,0.34082610,0.33854546,0.33854546,0.34234216,0.34762096,0.34837161,0.34385473,0.34082610,0.33549233,0.33778350,0.34536383,0.35434577,0.35657194,0.35136557,0.34385473,0.33702065,0.33702065,0.34686945,0.36026516,0.37049382,0.37049382,0.36540010,0.35879042,0.35583073,0.36100126,0.36976865,0.37913097,0.38055892,0.37841575,0.37049382,0.36758815,0.36831582,0.37554665,0.38340500,0.38623799,0.38623799,0.38340500,0.38411447,0.38835420,0.39396180,0.39744041,0.39951799,0.39674629,0.39046310,0.38411447,0.38694421,0.39326367,0.40296471,0.41047802,0.41183389,0.41115634,0.40979892,0.41115634,0.41453626,0.41990383,0.42522218,0.42654413,0.42588354,0.42389718,0.42389718,0.42786305,0.43049178,0.43506303,0.43636234,0.43571306,0.43701088,0.43765867,0.44088647,0.44537429,0.45045913,0.45235390,0.45235390,0.45361345,0.45298404,0.45172304,0.45549735,0.45737475,0.45737475,0.45487010,0.45298404,0.45361345,0.45487010,0.46048938,0.46911556,0.47398273,0.47820490,0.47760381,0.47519254,0.47033656,0.47033656,0.47337679,0.48060233,0.48949500,0.49938945,0.50283563,0.50340768,0.50054082,0.49417534,0.49417534,0.49533870,0.49938945,0.50625808,0.51078473,0.51078473,0.50625808,0.50397907,0.50454981,0.51190990,0.52192063,0.52793696,0.53226486,0.52848013,0.52630369,0.52466477,0.53226486,0.53974343,0.54762354,0.55073768,0.54553546,0.53494962,0.52793696,0.53118662,0.53761898,0.55280185,0.56498924,0.56748617,0.57046357,0.56798383,0.56698793,0.56848092,0.57243711,0.57830350,0.57733139,0.57878871,0.57586902,0.57095781,0.57194458,0.57684449,0.58265040,0.59121025,0.59959453,0.60554270,0.61274236,0.61805573,0.61673426,0.61363302,0.61050669,0.60644992,0.60508830,0.60644992,0.60735506,0.60690276,0.60372197,0.60235090,0.60143423,0.60143423,0.60097510,0.60280845,0.60372197,0.60417794,0.60097510,0.59681905,0.59402434,0.59402434,0.59261972,0.59588963,0.59774634,0.60235090,0.60143423,0.59867150,0.59215044,0.58790248,0.58600033,0.59073934,0.59774634,0.60280845,0.60463338,0.59867150,0.58885028,0.58408939,0.58265040,0.58742776,0.59449146,0.60372197,0.60097510,0.59355667,0.58647669,0.58552342,0.59402434,0.60735506,0.62459505,0.63356243,0.63692195,0.63187103,0.62242781,0.61318795,0.60644992,0.60326547,0.59774634,0.59215044,0.58168831,0.57684449,0.57733139,0.58695250,0.59867150,0.60554270,0.60508830,0.60143423,0.59495805,0.59261972,0.59215044,0.59261972,0.59215044,0.58313062,0.57440159,0.56398644,0.56146930,0.56298132,0.56698793,0.57046357,0.56848092,0.56498924,0.56045838,0.55893764,0.56096413,0.56897744,0.57538044,0.57830350,0.57733139,0.57440159,0.57095781,0.57145148,0.57145148,0.57440159,0.57975747,0.58504596,0.58120643,0.57194458,0.55792088,0.54291181,0.53226486,0.52466477,0.52026655,0.51749702,0.51638474]
   

   corr = interp1d(x, y, kind='cubic')
   return corr(freq_mhz)
      

def main():

    usage="Usage: %prog [options]\n"
    usage+="\tCreates an image of the 408 MHz sky (annoted with sources) that includes contours for the MWA primary beam\n"
    usage+="\tThe beam is monochromatic, and is the sum of the XX and YY beams\n"
    usage+="\tThe date/time (UT) and beamformer delays must be specified\n"
    usage+="\tBeamformer delays should be separated by commas\n"
    usage+="\tFrequency is in MHz, or a coarse channel number (can also be comma-separated list)\n"
    usage+="\tDefault is to plot centered on RA=0, but if -r/--racenter, will center on LST\n"
    usage+="\tContours will be plotted at %s of the peak\n" % contourlevels
    usage+="\tExample:\tpython primarybeammap.py -c 98 --beamformer=1,0,0,0,3,3,3,3,6,6,6,6,9,9,9,8 --datetimestring=20110926211840\n\n"
    
    parser = OptionParser(usage=usage)
    parser.add_option('-d','--datetimestring',dest="datetimestring",default=None,
                      help="Compute for <DATETIMESTRING> (YYYYMMDDhhmmss)",
                      metavar="DATETIMESTRING")
    parser.add_option('-c','--channel',dest='channel',default=None,
                      help='Center channel(s) of observation')
    parser.add_option('-f','--frequency',dest='frequency',default=None,
                      help='Center frequency(s) of observation [MHz]')
    parser.add_option('-b','--beamformer',dest='delays',default="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
                      help='16 beamformer delays separated by commas')
    parser.add_option('-D','--date',dest='date',default=None,
                      help='UT Date')
    parser.add_option('-t','--time',dest='time',default=None,
                      help='UT Time')
    parser.add_option('-g','--gps',dest='gps',default=0,help='GPS time',type="float")
    parser.add_option('-m','--model',dest='model',default='analytic', help='beam model: analytic, advanced, full_EE, full_EE_AAVS05')       
    parser.add_option('-p','--plottype',dest='plottype',default='beamsky', help='Type of plot: all, beam, sky, beamsky, beamsky_scaled')
    parser.add_option('--title',dest='title',default=None,
                      help='Plot title')
    parser.add_option('-e','--ext',dest='extension',default='png',
                      help='Plot extension [default=%default]')
#    parser.add_option('-r','--racenter',action="store_true",dest="center",default=False,
#                      help="Center on LST?")
#    parser.add_option('-s','--sunline',dest="sunline",default="1",choices=['0','1'],
#                      help="Plot sun [default=%default]")
    parser.add_option('--tle',dest='tle',default=None,
                      help='Satellite TLE file')
    parser.add_option('--duration',dest='duration',default=300,type=int,
                      help='Duration for plotting satellite track')
    parser.add_option('--size',dest='size',default=1000,type=int,
                      help='Resolution of created beam file')
    parser.add_option('--dir',dest='dir',default=None,help='output directory')

    parser.add_option('-v','--verbose',action="store_true",dest="verbose",default=False,
                      help="Increase verbosity of output")

    parser.add_option('-u','--unixtime',dest='unixtime_start',default=None,help='Unixtime start',type=int)
    parser.add_option('-i','--interval',dest='interval',default=86400,help='Unixtime start')
    parser.add_option('-s','--step',dest='step',default=1800,help='Step in seconds',type=int)
    parser.add_option('-o','--outfile',dest='out_filename',default='eda_sensitivity',help='Output filename')
    parser.add_option('-x','--outsens_file',dest='out_sensitivity_file',default='eda_sensitivity',help='Output filename for sensitivity')
    parser.add_option('--pointing_za_deg','--za',dest='pointing_za_deg',default=0.00,help='Pointing za [deg]',type=float)
    parser.add_option('--pointing_az_deg','--az',dest='pointing_az_deg',default=0.00,help='Pointing az [deg]',type=float)
    parser.add_option('--pointing_ra_deg','--ra',dest='pointing_ra_deg',default=None,help='Pointing RA [deg]',type=float)
    parser.add_option('--pointing_dec_deg','--dec',dest='pointing_dec_deg',default=None,help='Pointing DEC [deg]',type=float)
    parser.add_option('-n','--no_zenith_norm',action="store_false",dest="zenithnorm",default=True,help="Normalise to zenith (default True)")
    parser.add_option('--trcv_budi',action="store_true",dest="trcv_budi",default=False,help="Use EDA receiver temperature as measured by Budi (see ~/Desktop/EDA/loogbook/Cath/Budi_trcv and eda_aeff_cath.odt)")
    parser.add_option('--trcv_fit_data_vs_mode',action="store_true",dest="trcv_fit_data_vs_mode",default=False,help="Use T_rcv fitted to POWER vs. MODEL data in LST range 18-20 hours only see Ill. Illustration 6 in eda_drift_scan_data_201612.odt for details")
    parser.add_option('--trcv_fit_lightcurve_20160703_cubic',action="store_true",dest="trcv_fit_lightcurve_20160703_cubic",default=False,help="Use T_rcv from lightcurve fits see Ill.1 and Ill.2 in trcv_from_20160703_drift_scan.odt for details")

    parser.add_option('-r','--t_rcv',dest='t_rcv',default=0,help='Receiver noise temperature',type=float)    
    parser.add_option('--t_rcv_low',dest='t_rcv_low',default=0,help='Receiver noise temperature at low frequencies defined by parameter t_rcv_low_limit',type=float)    
    parser.add_option('--t_rcv_low_limit',dest='t_rcv_low_limit',default=0,help='Receiver noise temperature at low frequencies defined by parameter t_rcv_low_limit [default 0 - disabled]',type=float)

    # types : 
    #   trcv_angelica_data_vs_time : Use T_rcv from lightcurve fits see RED curve in Ill.25 haslam_vs_angelica.odt for details
    #   trcv_angelica_data_vs_time_powerlawfit : Use T_rcv from lightcurve fit and fit of power law to T_rcv(freq) see RED curve in Ill.24 haslam_vs_angelica.odt for details
    #   trcv_haslam_data_vs_model  : Use T_rcv from data vs. model see GREEN in Ill.25 haslam_vs_angelica.odt for details
    #   trcv_from_skymodel_with_err : Use T_rcv as calculated with errors fitted with curve see eda_lightcurve_and_trcv.odt Ill. 13 
    parser.add_option('--trcv_type',dest='trcv_type',default='lightcurve201612',help="Source of T_rcv possible values = lightcurve201612 (default), lightcurve_20160703_cubic, lightcurve_20160703_polfit, budi, data_vs_model_201612, trcv_angelica_data_vs_time, trcv_angelica_data_vs_time_powerlawfit, trcv_from_skymodel_with_err, trcv_aavs2, trcv_aavs2_vs_za_deg, trcv_eda2, trcv_eda1")
    parser.add_option('--use_median_fit',dest='use_median_fit',default=False,action="store_true",help="T_rcv from fit to median LC [default %default]")
    
    parser.add_option('--outfile_mode',dest='outfile_mode',default='w',help='Output file mode [default w]')
    parser.add_option('--s11',action="store_true",dest="use_s11",default=True,help="Take into account reflection coefficients of ANT and LNA (from Budi see comment to corr_factor function)")
    parser.add_option('--nos11',action="store_false",dest="use_s11",default=True,help="DO NOT Take into account reflection coefficients of ANT and LNA (from Budi see comment to corr_factor function)")
    parser.add_option('--adrian',action="store_true",dest="adrian_version",default=False,help="Use Adrian's version - see his note where supposedly M cancels only but in T_rcv/M, see comment to function corr_factor_adrian")
    parser.add_option('--extra_trcv',dest="extra_trcv",default=0,help="Additional T_rcv (Adrian says it might be 10-15 K extra)",type="float")
    parser.add_option('--dipole_type',dest='dipole_type',default='short',help='Dipole type default %default')
    parser.add_option('--print_trcv_only',dest='print_trcv_only',default=False,action="store_true",help="Only print T_rcv and exit [default %default]")

    # use single dipole beam :
    parser.add_option('--correlated_mode','--corr_mode','--correlator_mode',action="store_true",dest="correlator_mode",default=False,help="Use single dipole beam [default %default]")
    
    # sun:
    parser.add_option('--add_sun',action="store_true",dest="add_sun",default=False,help="Add sun")
    parser.add_option('--sun_ra',dest="sun_ra",default=None,help="Sun RA [deg] default = not set",type="float")
    parser.add_option('--sun_dec',dest="sun_dec",default=None,help="Sun Dec [deg] default = not set",type="float")

    # error in single antenna position:
    # shift_antenna
    parser.add_option('--offset_ant_idx',dest="offset_ant_idx",default=-1,help="Index of antenna to be offset by some amount [by default no antenna is put in wrong place]",type="int")
    parser.add_option('--offset_ant_dx',dest="offset_ant_dx",default=0.00,help="dX of antenna to be offset by some amount [by default no antenna is put in wrong place]",type="float")
    parser.add_option('--offset_ant_dy',dest="offset_ant_dy",default=0.00,help="dY of antenna to be offset by some amount [by default no antenna is put in wrong place]",type="float")

   # gain_sigma_dB=0.0, gain_sigma_ph_160mhz=0.00
    parser.add_option('--gain_sigma_db',dest='gain_sigma_db',default=0,help="RMS of the gain of each dipole",type=float)
    parser.add_option('--gain_sigma_ph',dest='gain_sigma_ph',default=0,help="RMS of the phase at 160 MHz of each dipole",type=float)

    # radio image (default HASLAM map):
    parser.add_option('--haslam','--radio_image',dest='radio_image',default='radio408.RaDec.fits',help='Sky model map [default %default]')    
    
    # polarisations :
    parser.add_option('--pols','--polarisations',dest='pol_list_string',default='XX,YY',help='Polarisations [default %default]')
    
    # header on / off :
    parser.add_option('--no_header','--no-header',action="store_false",dest="print_header",default=True,help="Use this option to disable header printing [default %default]")
    parser.add_option('--header','--hdr',dest='header',default=None,help='Header info  [default %default]')
    
    # use beam fits files in ~/aavs-calibration/
    # use_beam_fits=options.use_beam_fits, station_name=options.station_name
    help_str=("Use fits beam files from %s [default %%default]" % station_beam_config.beam_model_path)
    parser.add_option('--use_beam_fits',action="store_true",dest="use_beam_fits",default=False,help=help_str)
    
    help_str=("Station name to find beam fits files in %s [default %%default]" % station_beam_config.beam_model_path)
    parser.add_option('--beam_fits_station','--station_name',dest="station_name",default="EDA",help=help_str)
    
    help_str=("Path to location of FITS files with beam models of individual station dipole [default %s]" % (station_beam_config.beam_model_path))
    parser.add_option('--beam_models_path','--models_path',dest="beam_model_path",default=station_beam_config.beam_model_path,help=help_str)
    
    parser.add_option('--projection',dest="projection",default="zea", help="Projection [default %default]")
    
    # antenna locations file :
    # read_antenna_list
    parser.add_option('--antfile','--antenna_locations',dest="antenna_locations",default=None,help="Read antenna locations and flags from this file [default %default]")

    # parameters for sensitivity calculations :
    parser.add_option('--inttime', dest='inttime', default=1800, type=float, help='Integration time to calculate sensitivity for [default % sec]')
    parser.add_option('--bandwidth', dest='bandwidth', default=925925.925925926, type=float, help='Bandwidth to calculate sensitivity for [default % Hz]')
    parser.add_option('-a', '--antnum', dest='antnum', default=256, type=int, help='Number of antennas [default %]')


    (options, args) = parser.parse_args()
    station_beam_config.beam_model_path=options.beam_model_path    
    datetimestring=options.datetimestring
    set_sun( options.add_sun, options.sun_ra, options.sun_dec )

    if options.offset_ant_idx >= 0 :
       shift_antenna( options.offset_ant_idx, options.offset_ant_dx, options.offset_ant_dy )
    
    if options.trcv_budi :
       options.trcv_type="budi"
    elif options.trcv_fit_data_vs_mode :
       options.trcv_type="data_vs_model_201612"
    elif options.trcv_fit_lightcurve_20160703_cubic :
       options.trcv_type="lightcurve20160703_cubic"

    ant_count = None
    if options.antenna_locations is not None :
       (xs,ys,zs,ant_count) = read_antenna_list( options.antenna_locations , overwrite=True )
       print("Read %d antenna positions from file %s ( starting with (%.2f,%.2f,%.2f) and ending with (%.2f,%.2f,%.2f))" % (ant_count,options.antenna_locations,xs[0],ys[0],zs[0],xs[ant_count-1],ys[ant_count-1],zs[ant_count-1]))
   
    if options.unixtime_start is not None :
       if options.gps is None or options.gps <= 0 :
          options.gps = options.unixtime_start - 315964783
    else :
       options.unixtime_start = options.gps + 315964783

          
    if options.pointing_ra_deg is not None and options.pointing_dec_deg is not None :
       import fits_beam
     
       uxtime = options.unixtime_start
       if uxtime is None :
          uxtime = options.gps + 315964783
       ( ra , dec , options.pointing_az_deg , alt , options.pointing_za_deg ) = fits_beam.radec2azh( options.pointing_ra_deg, options.pointing_dec_deg, uxtime )
       print("INFO : converted (RA,DEC) = (%.4f,%.4f) [deg] into (AZ,ZA) = (%.4f,%.4f) [deg] for uxtime = %.2f" % (options.pointing_ra_deg, options.pointing_dec_deg, options.pointing_az_deg, options.pointing_za_deg, uxtime ))

    print("##################################################")
    print("PARAMETERS:")
    print("##################################################")
    print("GPS time  = %.2f (uxtime = %.2f)" % (options.gps,options.unixtime_start))
    print("channels  = %s" % (options.channel))
    print("Trcv type = %s ( use_median_fit = %s )" % (options.trcv_type,options.use_median_fit))
    print("Trcv      = %.2f K" % (options.t_rcv))
    print("Trcv_low  = %.2f K (below %.2f MHz)" % (options.t_rcv_low,options.t_rcv_low_limit))
    print("Extra T_rcv = %.2f K" % (options.extra_trcv))
    print("Output file = %s (mode = %s)" % (options.out_filename,options.outfile_mode))
    print("Use S11   = %s"   % options.use_s11)
    print("Dipole type = %s" % options.dipole_type)
    print("Add sun     = %s at (RA,DEC) calculated for each timestamp" % (options.add_sun))
    print("Shifted antenna index = %d , shift = (%.2f,%.2f) [m]" % (options.offset_ant_idx,options.offset_ant_dx,options.offset_ant_dy))
    print("Print header = %s" % (options.print_header))
    print("Header       = %s" % (options.header))
    if options.antenna_locations is not None :
       print("External antenna position file %s (read %d ants)" % (options.antenna_locations,ant_count))
    else :
       print("WARNING : antenna position file not provided -> using default antenna locations (for EDA1)")
    print("Correlator mode = %s" % (options.correlator_mode))       
    print("Beam model path = %s" % (station_beam_config.beam_model_path))
    print("##################################################")
    
    if options.dir is not None:
       mkdir_p(options.dir)

    
    if options.frequency is not None:
        if (',' in options.frequency):
            try:
                frequency=map(float,options.frequency.split(','))
            except ValueError:
                logger.error("Could not parse frequency %s\n" % options.frequency)
                sys.exit(1)
        else:
            try:
                frequency=float(options.frequency)
            except ValueError:
                logger.error("Could not parse frequency %s\n" % options.frequency)
                sys.exit(1)
    else:
        frequency=options.frequency
    if options.channel is not None:
        if (',' in options.channel):
            try:
                channel=map(float,options.channel.split(','))
            except ValueError:
                logger.error("Could not parse channel %s\n" % options.channel)
                sys.exit(1)
        else:
            try:
                channel=float(options.channel)
            except ValueError:
                logger.error("Could not parse channel %s\n" % options.channel)
                sys.exit(1)
    else:
        channel=options.channel

    if options.delays is not None:
        try:
            if (',' in options.delays):
                delays=map(int,options.delays.split(','))
            else:
                delays=16*[int(options.delays)]
        except:
            logger.error("Could not parse beamformer delays %s\n" % options.delays)
            sys.exit(1)
    else:
        delays=list(options.delays)
        # delays=numpy.zeros(256)

    extension=options.extension
    plottype=options.plottype
    model=options.model
    if model not in ['analytic','advanced','full_EE', 'full_EE_AAVS05']:
        logger.error("Model %s not found\n" % model)
        sys.exit(1)   
    if plottype not in ['all', 'beam','sky','beamsky','beamsky_scaled','None']:
        logger.error("Plot type %s not found\n" % plottype)
        sys.exit(1)                   
    gpsstring=options.gps
    gps=int(gpsstring)
               
    if (len(list(delays))<16):
        logger.error("Must supply 1 or 16 delays\n")
        sys.exit(1)
    if (frequency is None):
        if (channel is not None):
            if (isinstance(channel,list)):
                frequency=list(1.28*numpy.array(channel)) # multiplication by 1e6 is done later at line Convert to Hz
            else:
                frequency=1.28*channel # multiplication by 1e6 is done later at line Convert to Hz
    if frequency is None:
        logger.error("Must supply frequency or channel\n")
        sys.exit(1)
    if (isinstance(frequency,int) or isinstance(frequency,float)):
        frequency=[frequency]
    frequency=np.array(frequency)*1e6 #Convert to Hz        

    out_file=open(options.out_filename,"w")
    out_file.close()

    print("frequency = %s" % (frequency))

    outfile_sens_XX = options.out_sensitivity_file + "_XX.txt"
    outfile_sens_YY = options.out_sensitivity_file + "_YY.txt"
    f_out_XX=open(outfile_sens_XX,options.outfile_mode)
    f_out_YY=open(outfile_sens_YY,options.outfile_mode)    
    

    if options.print_header :
       if options.header is not None : 
          lst = get_LST( float(options.gps) )
          out_line = "# %s : gps = %.2f , az = %.8f [deg] , za = %.8f [deg] , lst = %.8f [hours]\n" % (options.header,float(options.gps),options.pointing_az_deg,options.pointing_za_deg,lst)
          f_out_XX.write(out_line)
          f_out_YY.write(out_line)

       out_line="# FREQ[MHz] Sensitivity[m^2/K] T_sys[K] A_eff[m^2] T_rcv[K] T_ant[K] M=(1-|G_a|^2)xF\n"
       f_out_XX.write(out_line)
       f_out_YY.write(out_line)

             

    T_rcv = options.t_rcv # just a try of 500K looked very good , 26.7K is from Kim 
    for freq in frequency:
        freq_mhz = freq/1e6               

        # based on my drift scan measurements in eda_drift_scan_data_201612.odt (Ill.2) :
        # DEFAULT option.trcv_type == lightcurve201612 

# 20190820 - changed to a function instead of coded here :
#20200811        T_rcv = station_trcv.trcv_lightcurve201612( freq_mhz )         
#        T_rcv =  +53480.71172570309136062860488891601562500000000000000000 - 1455.76561026112926811038050800561904907226562500000000*freq_mhz \
#             +12.16264789947674174186431628186255693435668945312500*freq_mhz*freq_mhz -0.00271098517125182300949171043669139180565252900124*freq_mhz*freq_mhz*freq_mhz \
#             -0.00030428122418899071835451941581140999915078282356*freq_mhz*freq_mhz*freq_mhz*freq_mhz -0.00000046193435183846278872557794374642536894270961*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz \
#             +0.00000000959650510252193562322564293230395260358989*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz \
#             +0.00000000001953073405836920809493335023823663365930*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz \
#             -0.00000000000028926757335617184960944065203237193611*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz \
#             +0.00000000000000055485231182041931661150443032917814*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz*freq_mhz
        
#20200811        if options.trcv_type=="budi" : # or options.trcv_budi :
#20200811           print("Using Trcv_BUDI")
#20200811           T_rcv = station_trcv.trcv_budi( freq_mhz )
#20200811        elif options.trcv_type=="data_vs_model_201612" : # or options.trcv_fit_data_vs_mode :
#20200811           print("Using Trcv trcv_fit_data_vs_mode (201612)")           
#20200811           T_rcv = station_trcv.trcv_fit_data_vs_mode( freq_mhz )
#20200811        elif options.trcv_type=="lightcurve_20160703_cubic" : # or options.trcv_fit_lightcurve_20160703_cubic :
#20200811           print("Using Trcv trcv_fit_lightcurve_20160703_cubic")
#20200811           T_rcv = station_trcv.trcv_fit_lightcurve_20160703_cubic( freq_mhz )
#20200811        elif options.trcv_type=="lightcurve_20160703_polfit" :
#20200811           print("Using Trcv trcv_fit_lightcurve_20160703_polfit")
#20200811           T_rcv = station_trcv.trcv_fit_lightcurve_20160703_polfit( freq_mhz )
#20200811        elif options.trcv_type=="trcv_angelica_data_vs_time" :
#20200811           T_rcv = station_trcv.trcv_angelica_data_vs_time( freq_mhz )
#20200811        elif options.trcv_type=="trcv_haslam_data_vs_model" :
#20200811           T_rcv = station_trcv.trcv_haslam_data_vs_model( freq_mhz )
#20200811        elif options.trcv_type=="trcv_angelica_data_vs_time_powerlawfit" :
#20200811           T_rcv = station_trcv.trcv_angelica_data_vs_time_powerlawfit( freq_mhz )
#20200811        elif options.trcv_type=="trcv_from_skymodel_with_err" :
#20200811           T_rcv = station_trcv.trcv_from_skymodel_with_err( freq_mhz )
#20200811        elif options.trcv_type=="trcv_aavs2" :
#20200811           print("INFO : Calling trcv_aavs2")
#20200811           T_rcv = station_trcv.trcv_aavs2( freq_mhz )
#20200811        elif options.trcv_type=="trcv_aavs2_vs_za_deg" :
#20200811           print("INFO : Calling trcv_aavs2_vs_za_deg")
#20200811           T_rcv = station_trcv.trcv_aavs2( freq_mhz, za_deg=options.pointing_za_deg )
#20200811        elif options.trcv_type=="trcv_eda2" :
#20200811           T_rcv = station_trcv.trcv_eda2( freq_mhz )
#20200811        elif options.trcv_type=="trcv_eda1" :
#20200811           T_rcv = station_trcv.trcv_eda1( freq_mhz )        
        T_rcv = station_trcv.trcv_multi( freq_mhz, options.trcv_type, za_deg=options.pointing_za_deg,  use_median_fit=options.use_median_fit )
        print("DEBUG : new code version T_rcv = %.4f [K] from station_trcv.trcv_multi" % (T_rcv))
        
        T_rcv_x = T_rcv
        T_rcv_y = T_rcv
        
        if options.trcv_type == "trcv_eda2_single_dipole_fit" :
           print("WARNING : using fitted values of T_rcv trcv_eda2_single_dipole_fit which are different for X and Y polarisations")
           T_rcv_x = station_trcv.trcv_multi( freq_mhz, "trcv_eda2_single_dipole_fit", za_deg=options.pointing_za_deg, pol="X", use_median_fit=options.use_median_fit )
           T_rcv_y = station_trcv.trcv_multi( freq_mhz, "trcv_eda2_single_dipole_fit", za_deg=options.pointing_za_deg, pol="Y", use_median_fit=options.use_median_fit )
        

        # has to be last to overwrite with consant value 
        if options.t_rcv > 1 : # if set external value use it :
           print("Using t_rcv = %.2f K at freq_mhz = %.2f MHz" % (options.t_rcv,freq_mhz))
           T_rcv = options.t_rcv          
           T_rcv_x = T_rcv
           T_rcv_y = T_rcv
           
        if options.t_rcv_low > 1 and freq_mhz<options.t_rcv_low_limit :
           print("Using t_rcv_low = %.2f K (freq_mhz = %.2f MHz < %.2f MHz)" % (options.t_rcv_low,freq_mhz,options.t_rcv_low_limit))
           T_rcv = options.t_rcv_low
           T_rcv_x = T_rcv
           T_rcv_y = T_rcv

        print("Frequency = %.2f [MHz] -> T_rcv = %.2f K -> %.2f K (+%.2fK) , T_rcv_x = %.2f K, T_rcv_y = %.2f K" % (freq_mhz,T_rcv,(T_rcv + options.extra_trcv),options.extra_trcv,T_rcv_x,T_rcv_y))        
        T_rcv = T_rcv + options.extra_trcv
        T_rcv_x = T_rcv_x + options.extra_trcv
        T_rcv_y = T_rcv_y + options.extra_trcv
        
        if options.print_trcv_only :
           print("Only printing T_rcv")
           continue
                
        (beamsky_sum_XX,beam_sum_XX,Tant_XX,beam_dOMEGA_sum_XX,beamsky_sum_YY,beam_sum_YY,Tant_YY,beam_dOMEGA_sum_YY,beams) = make_primarybeammap( gps, delays, freq, model=model, plottype=plottype, 
                                                                                                                                                   extension=extension, resolution=options.size, 
                                                                                                                                                   directory=options.dir, out_filename=options.out_filename,
                                                                                                                                                   pointing_za_deg=options.pointing_za_deg,
                                                                                                                                                   pointing_az_deg=options.pointing_az_deg,
                                                                                                                                                   gain_sigma_ph_160mhz=options.gain_sigma_ph,
                                                                                                                                                   gain_sigma_dB=options.gain_sigma_db,
                                                                                                                                                   radio_image=options.radio_image,
                                                                                                                                                   pol_list_string=options.pol_list_string,
                                                                                                                                                   use_beam_fits=options.use_beam_fits, 
                                                                                                                                                   station_name=options.station_name,
                                                                                                                                                   projection=options.projection
                                                                                                                                                 )
        beams=get_beam_power( gps, delays, freq, model=model, 
                              pointing_az_deg=options.pointing_az_deg, 
                              pointing_za_deg=options.pointing_za_deg, 
                              zenithnorm=options.zenithnorm, 
                              gain_sigma_ph_160mhz=options.gain_sigma_ph, 
                              gain_sigma_dB=options.gain_sigma_db, 
                              use_beam_fits=options.use_beam_fits, 
                              station_name=options.station_name,
                              projection=options.projection
                            )
                              

        gain_XX = beams['XX']/(beam_dOMEGA_sum_XX/(4.00*math.pi))
        gain_YY = beams['YY']/(beam_dOMEGA_sum_YY/(4.00*math.pi))
        
        
        print("gain_XX = %.8f / (%.8f/(4PI)) , gain_YY = %.8f / (%.8f/(4PI))" % (beams['XX'],beam_dOMEGA_sum_XX,beams['YY'],beam_dOMEGA_sum_YY))
        
        # 7161.97 was with C_ms = 300 (in MHz units)
        # 7152.06646627 is for C_ms = 299.792458 - the difference is ~0.1 % so insignificant
        ant_efficiency=1.00
        aeff_XX = (7152.06646627/(freq_mhz*freq_mhz))*(gain_XX*ant_efficiency)
        aeff_YY = (7152.06646627/(freq_mhz*freq_mhz))*(gain_YY*ant_efficiency)
        
        corr = 1.00
        if options.use_s11 :
           if options.adrian_version :
              corr = corr_factor_adrian(freq_mhz)
           else :
              corr = corr_factor(freq_mhz)

        if options.correlator_mode :  
           # in correlator mode, T_ant is really from just a single dipole, but A_eff is still for the full beam !
            (dip_beamsky_sum_XX,dip_beam_sum_XX,dip_Tant_XX,dip_beam_dOMEGA_sum_XX,dip_beamsky_sum_YY,dip_beam_sum_YY,dip_Tant_YY,dip_beam_dOMEGA_sum_YY,dip_beams) = make_primarybeammap( gps, delays, freq, model=model, 
                                                                                                                                                   plottype=None, # do not plot single dipole beams 
                                                                                                                                                   extension=extension, resolution=options.size, 
                                                                                                                                                   directory=options.dir, out_filename=options.out_filename,
                                                                                                                                                   pointing_za_deg=options.pointing_za_deg,
                                                                                                                                                   pointing_az_deg=options.pointing_az_deg,
                                                                                                                                                   gain_sigma_ph_160mhz=options.gain_sigma_ph,
                                                                                                                                                   gain_sigma_dB=options.gain_sigma_db,
                                                                                                                                                   radio_image=options.radio_image,
                                                                                                                                                   pol_list_string=options.pol_list_string,
                                                                                                                                                   use_beam_fits=options.use_beam_fits, 
                                                                                                                                                   station_name=options.station_name,
                                                                                                                                                   mean_dipole_beam=True,
                                                                                                                                                   projection=options.projection
                                                                                                                                                 )
            Tant_XX = dip_Tant_XX
            Tant_YY = dip_Tant_YY                                                                                                                                                 

        
        T_sys_XX = ( Tant_XX + T_rcv_x/corr )
        T_sys_YY = ( Tant_YY + T_rcv_y/corr )

        sens_XX = (aeff_XX) / ( T_sys_XX )
        sens_YY = (aeff_YY) / ( T_sys_YY )
        
        sefd_XX = (2760.00 / sens_XX)  # 2k/(A/T)
        sefd_YY = (2760.00 / sens_YY)  # 2k/(A/T)
        
        gain_XX = ( T_sys_XX / sefd_XX )
        gain_YY = ( T_sys_YY / sefd_YY )
        
        noise_XX = sefd_XX / math.sqrt( options.bandwidth * options.inttime )
        noise_YY = sefd_YY / math.sqrt( options.bandwidth * options.inttime )

        # WARNING : should be more complicated than this (TO-BE-UPDATED) :
        noise_I = 0.5*math.sqrt( noise_XX*noise_XX + noise_YY*noise_YY )
                        
        print("%.2f Hz :" % (freq))        
        print("Corr factor (%.2f MHz) = %.4f" % (freq_mhz,corr))
        print("\t\tXX (%.2f MHz) : T_ant_XX = %.2f  = (%.8f / %.8f) -> beam(%.4f,%.4f)=%.8f , gain=%.8f , aeff=%.8f, sensitivity_AoT=%.20f [m^2/K] , T_rcv_x=%.2f -> SEFD_XX = %.4f [Jy] , noise_XX = %.4f Jy in %.2f sec , %.2f MHz , gain_XX = %.4f [Jy/K]" % (freq_mhz,Tant_XX,beamsky_sum_XX,beam_sum_XX,options.pointing_az_deg,options.pointing_za_deg,beams['XX'],gain_XX,aeff_XX,sens_XX,T_rcv_x,sefd_XX,noise_XX,options.inttime,options.bandwidth/1e6,gain_XX))
        print("\t\tYY (%.2f MHz) : T_ant_YY = %.2f  = (%.8f / %.8f) -> beam(%.4f,%.4f)=%.8f , gain=%.8f , aeff=%.8f, sensitivity_AoT=%.20f [m^2/K] , T_rcv_y=%.2f -> SEFD_YY = %.4f [Jy] , noise_YY = %.4f Jy in %.2f sec , %.2f MHz , gain_YY = %.4f [Jy/K]" % (freq_mhz,Tant_YY,beamsky_sum_YY,beam_sum_YY,options.pointing_az_deg,options.pointing_za_deg,beams['YY'],gain_YY,aeff_YY,sens_YY,T_rcv_y,sefd_YY,noise_YY,options.inttime,options.bandwidth/1e6,gain_YY))
        
        print("Noise expected on XX images = %.4f Jy" % noise_XX)
        print("Noise expected on YY images = %.4f Jy" % noise_YY)
        print("Noise expected on Stokes I images = %.4f Jy (simple formula only !)" % noise_I)
        
        out_line_XX="%.8f %.8f %.2f %.8f %.8f %.8f %.8f\n" % (freq_mhz,sens_XX,T_sys_XX,aeff_XX,T_rcv_x,Tant_XX,corr)
        out_line_YY="%.8f %.8f %.2f %.8f %.8f %.8f %.8f\n" % (freq_mhz,sens_YY,T_sys_YY,aeff_YY,T_rcv_y,Tant_YY,corr)
        f_out_XX.write(out_line_XX)        
        f_out_YY.write(out_line_YY)        
    
#    alpha=-2.55
#    rX,rY=get_skytemp(datetimestring, delays, frequency,alpha=alpha)
#    print 'Tsky_X for alpha %s: %s'%(alpha,rX)
#    print 'Tsky_Y for alpha %s: %s'%(alpha,rY)

    f_out_XX.close()
    f_out_YY.close()

if __name__ == "__main__":
    main()
